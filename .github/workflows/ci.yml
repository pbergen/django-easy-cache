name: CI/CD

on:
  push:
    branches:
    - main
    tags:
      - '*.*.*'           # Release tags: 1.0.0
      - '*.*.*-alpha-*'   # Alpha tags: 1.0.0-alpha-1
      - '*.*.*-beta-*'    # Beta tags: 1.0.0-beta-1
  pull_request:

jobs:
  linting:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install required packages
        run: pip install pre-commit

      - name: Run pre-commit hooks
        run: pre-commit run --all-files

  validate_migrations:
    name: Validate migrations
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: python -m pip install -U pip-tools && pip-compile --extra dev, -o requirements.txt pyproject.toml --resolver=backtracking && pip-sync

      - name: Validate migration integrity
        run: python manage.py makemigrations --check --dry-run

  tests:
    name: Python ${{ matrix.python-version }}, django ${{ matrix.django-version }}
    runs-on: ubuntu-24.04

    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13', ]
        django-version: ['42', '51', '52', ]

        exclude:
          - python-version: '3.9'
            django-version: 52
          - python-version: '3.9'
            django-version: 51
          - python-version: "3.13"
            django-version: 42

    steps:
      - uses: actions/checkout@v4
      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install tox
        run: pip install tox
      - name: Run Tests
        env:
          TOXENV: django${{ matrix.django-version }}
          DATABASE_URL: sqlite:///test_py${{ matrix.python-version }}_dj${{ matrix.django-version }}.db
        run: tox
      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-${{ matrix.python-version }}-${{ matrix.django-version }}
          path: '${{ github.workspace }}/.coverage.*'
          include-hidden-files: true
          if-no-files-found: error

  coverage:
    name: Coverage
    runs-on: ubuntu-24.04
    needs: tests
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: python -m pip install --upgrade coverage[toml]

      - name: Download data
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}
          pattern: coverage-data-*
          merge-multiple: true

      - name: Combine coverage and fail if it's <85.0%
        run: |
          python -m coverage combine
          python -m coverage html --skip-covered --skip-empty
          python -m coverage report --fail-under=85.0
          echo "## Coverage summary" >> $GITHUB_STEP_SUMMARY
          python -m coverage report --format=markdown >> $GITHUB_STEP_SUMMARY

  build:
    name: Build distribution
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [linting, validate_migrations, tests, coverage]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish-to-testpypi:
    name: Publish to TestPyPI
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && (contains(github.ref_name, '-alpha-') || contains(github.ref_name, '-beta-'))
    needs: build
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/django-easy-cache

    permissions:
      id-token: write

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

  publish-to-pypi:
    name: Publish to PyPI
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !contains(github.ref_name, '-alpha-') && !contains(github.ref_name, '-beta-')
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/django-easy-cache
    permissions:
      id-token: write

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
